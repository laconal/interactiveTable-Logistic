import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogClose } from "@/components/ui/dialog";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { ScrollArea } from "@/components/ui/scroll-area";
import React, { useEffect, useState } from "react";


const ip = process.env.NEXT_PUBLIC_API

interface ChangesHistory {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  id: number;
  token?: string;
}

interface History {
    history_date: string,
    history_user: string,
    history_type: string,
    changed_fields: string[],
    snapshot: Record<string, any>
}

const FIELD_LABELS: Record<string, string> = {
    "client": "–ö–ª–∏–µ–Ω—Ç",
    "foreignOrder": "–ó–∞—Ä—É–±–∂–µ–Ω–∞—è —Å–¥–µ–ª–∫–∞",
    "clientManager": "–ö–ª–∏–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä",
    "client_sLegalEntity": "–Æ–õ –∫–ª–∏–µ–Ω—Ç–∞",
    "routeStart": "–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏",
    "routeEnd": "–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
    "transshipmentPoint": "–ü—É–Ω–∫—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∞",
    "cargo": "–ì—Ä—É–∑",
    "tnved": "–ö–æ–¥ –¢–ù–í–≠–î",
    "loadDate": "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
    "cooperativeOrder": "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Å–¥–µ–ª–∫–∞",
    "sumOnClient": "–°—É–º–º–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞",
    "brutto": "–ë—Ä—É—Ç—Ç–æ $",
    "netto": "–ù–µ—Ç—Ç–æ $",
    "kn": "–ö–ù",
    "profit": "–ü—Ä–æ—Ñ–∏—Ç",
    "deliverDateByCMR": "–î–∞—Ç–∞ –ø–æ–≥—Ä/–≤—ã–≥—Ä –ø–æ CMR",
    "vehicle": "–¢–°",
    "orderID": "–°–¥–µ–ª–∫–∞",
    "applicationID": "–ó–∞—è–≤–∫–∞",
    "actsAndInvoices": "–ê–∫—Ç—ã –∏ –∏–Ω–≤–æ–π—Å—ã",
    "expeditor": "–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä",
    "contractorInvoice": "–°—á–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞",
    "contractor": "–ü–æ–¥—Ä—è–¥—á–∏–∫",
    "contractorLegalEntity": "–Æ–õ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞",
    "additionalExpenses": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "notes": "–ó–∞–º–µ—Ç–∫–∏",
    "orderStatus": "–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏",
    "client_sInsuranceID": "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞",
    "applicationAttached": "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞",
    "contractorInvoiceSent": "–°—á–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
    "cancelled": "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    "needToChangeVehicle": "–ò–∑–º–µ–Ω–∏—Ç—å –¢–°",
    "needToChangeBrutto": "–ò–∑–º–µ–Ω–∏—Ç—å –ë—Ä—É—Ç—Ç–æ",
    "needToChangeNetto": "–ò–∑–º–µ–Ω–∏—Ç—å –ù–µ—Ç—Ç–æ",
    "cargoType": "–¢–∏–ø –≥—Ä—É–∑–∞",
    "addedToDB_time": "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", 
    "createdByUser": "–°–æ–∑–¥–∞–Ω",
    "history_date": "–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
    "history_type": "–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è",
    "history_user": "–ò–∑–º–µ–Ω–µ–Ω",
    "toDelete": "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"
}

const HIDDEN_FIELDS = [
    "history_id",
    "history_type",
    "history_change_reason"
]

type FieldChange = {
    date: string;
    user: string;
    from: any;
    to: any;
}

type GroupedHistory = Record<string, FieldChange[]>

function formatValue(value: any): string {
    if (value === null || value === undefined || value === "") return "–ü—É—Å—Ç–æ";
    if (typeof value === "boolean") return value ? "–î–∞" : "–ù–µ—Ç";
    return String(value);
  }

function formatDateTime(dateStr: string): string {
    const date = new Date(dateStr);
    return date.toLocaleString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit"
    })
}

function groupHistoryByField(history: History[]): GroupedHistory {
    const grouped: GroupedHistory = {};
    for (const entry of history) {
        if (entry.history_type === "~") {
            for (const field of entry.changed_fields) {
                if (HIDDEN_FIELDS.includes(field)) continue;

                if (!grouped[field]) {
                    grouped[field] = [];
                }

                grouped[field].push({
                    date: entry.history_date,
                    user: entry.history_user,
                    from: entry.snapshot[field]?.from,
                    to: entry.snapshot[field]?.to
                });
            }
        }
    }
    return grouped;
}

export function ChangesHistoryDialog({ open, onOpenChange, id, token}: ChangesHistory) {
    const [history, setHistory] = useState<History[]>([])
    useEffect(() => {
        if (open && id && token) {
            fetch(`${ip}/RCC/history/${id}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                }
            })
            .then((res) => res.json())
            .then((data) => {
                if (Array.isArray(data)) {
                    setHistory(data)
                } else {
                    console.error("Unexpected response", data)
                }
            })
            .catch((err) => console.error("Failed to fetch history", err))
        }
    }, [open, id, token])
    const creationEntry = history.find(h => h.history_type === "+");
    const grouped = groupHistoryByField(history)
    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="w-[1000px]">
                <DialogHeader>
                    <DialogTitle>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ID: {id}</DialogTitle>
                </DialogHeader>
                <ScrollArea className="h-[700px] pr-4">
                <Accordion type="multiple">
                    {/* üü¢ Creation Snapshot */}
                    {creationEntry && (
                    <AccordionItem value="creation">
                        <AccordionTrigger>
                        –°–æ–∑–¥–∞–Ω–∏–µ ‚Äî {formatDateTime(creationEntry.history_date)} –æ—Ç {creationEntry.history_user}
                        </AccordionTrigger>
                        <AccordionContent>
                        <div className="text-sm space-y-1">
                            {Object.entries(creationEntry.snapshot)
                            .filter(([key]) => !HIDDEN_FIELDS.includes(key))
                            .map(([key, val]) => (
                                <div key={key}>
                                <strong>{FIELD_LABELS[key] || key}:</strong> {formatValue(val)}
                                </div>
                            ))}
                        </div>
                        </AccordionContent>
                    </AccordionItem>
                    )}

                    {/* üü° Grouped Field Changes */}
                    {Object.entries(grouped).map(([field, changes]) => (
                    <AccordionItem key={field} value={field}>
                        <AccordionTrigger>
                        {FIELD_LABELS[field] || field}
                        </AccordionTrigger>
                        <AccordionContent>
                        <ul className="text-sm pl-4 list-disc">
                            {changes.map((change, i) => (
                            <li key={i}>
                                {formatDateTime(change.date)} –æ—Ç {change.user}:{" "}
                                {formatValue(change.from)} ‚Üí {formatValue(change.to)}
                            </li>
                            ))}
                        </ul>
                        </AccordionContent>
                    </AccordionItem>
                    ))}
                </Accordion>
                </ScrollArea>
            </DialogContent>
        </Dialog>
    )
}